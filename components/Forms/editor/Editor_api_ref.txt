Props:
name='lang' type_=reflex.vars.Var[typing.Union[typing.Literal['en', 'da', 'de', 'es', 'fr', 'ja', 'ko', 'pt_br', 'ru', 'zh_cn', 'ro', 'pl', 'ckb', 'lv', 'se', 'ua', 'he', 'it'], dict]] description=' Language of the editor. Alternatively to a string, a dict of your language can be passed to this prop. Please refer to the library docs for this. options: "en" | "da" | "de" | "es" | "fr" | "ja" | "ko" | "pt_br" |  "ru" | "zh_cn" | "ro" | "pl" | "ckb" | "lv" | "se" | "ua" | "he" | "it" default : "en"'
name='name' type_=reflex.vars.Var[str] description=' This is used to set the HTML form name of the editor. This means on HTML form submission, it will be submitted together with contents of the editor by the name provided.'
name='default_value' type_=reflex.vars.Var[str] description=" Sets the default value of the editor. This is useful if you don't want the on_change method to be called on render. If you want the on_change method to be called on render please use the set_contents prop"
name='width' type_=reflex.vars.Var[str] description=' Sets the width of the editor. px and percentage values are accepted, eg width="100%" or width="500px" default: 100%'
name='height' type_=reflex.vars.Var[str] description=' Sets the height of the editor. px and percentage values are accepted, eg height="100%" or height="100px"'
name='placeholder' type_=reflex.vars.Var[str] description=' Sets the placeholder of the editor.'
name='auto_focus' type_=reflex.vars.Var[bool] description=' Should the editor receive focus when initialized?'
name='set_options' type_=reflex.vars.Var[typing.Dict] description=' Pass an EditorOptions instance to modify the behaviour of Editor even more.'
name='set_all_plugins' type_=reflex.vars.Var[bool] description=' Whether all SunEditor plugins should be loaded. default: True'
name='set_contents' type_=reflex.vars.Var[str] description=" Set the content of the editor. Note: To set the initial contents of the editor without calling the on_change event, please use the default_value prop. set_contents is used to set the contents of the editor programmatically. You must be aware that, when the set_contents's prop changes, the on_change event is triggered."
name='append_contents' type_=reflex.vars.Var[str] description=' Append editor content'
name='set_default_style' type_=reflex.vars.Var[str] description=" Sets the default style of the editor's edit area"
name='disable' type_=reflex.vars.Var[bool] description=' Disable the editor default: False'
name='hide' type_=reflex.vars.Var[bool] description=' Hide the editor default: False'
name='hide_toolbar' type_=reflex.vars.Var[bool] description=' Hide the editor toolbar default: False'
name='disable_toolbar' type_=reflex.vars.Var[bool] description=' Disable the editor toolbar default: False'

Events:
('on_blur', {'description': 'Function or event handler called when focus has left the element (or left some element inside of it). For example, it is called when the user clicks outside of a focused text input.'})
('on_change', {'description': 'The on_change event handler is called when the value or checked state of the component changes.'})
('on_input', {'description': 'The on_input event handler is called when the editor receives input from the user. It receives the raw browser event as an argument.'})
('on_load', {'description': 'The on_load event handler is called when the user loads a form. For example, it is called when the user clicks on a load button.'})
('on_resize_editor', {'description': 'The on_resize_editor event handler is called when the editor is resized. It receives the height and previous height as arguments.'})
('on_copy', {'description': 'The on_copy event handler is called when the user copies text from the editor. It receives the clipboard data as an argument.'})
('on_cut', {'description': 'The on_cut event handler is called when the user cuts text from the editor. It receives the clipboard data as an argument.'})
('on_paste', {'description': 'The on_paste event handler is called when the user pastes text into the editor. It receives the clipboard data and max character count as arguments.'})
('toggle_code_view', {'description': 'The toggle_code_view event handler is called when the user toggles code view. It receives a boolean whether code view is active.'})
('toggle_full_screen', {'description': 'The toggle_full_screen event handler is called when the user toggles full screen. It receives a boolean whether full screen is active.'})