Props:
name='bar_category_gap' type_=reflex.vars.Var[typing.Union[str, int]] description=' The gap between two bar categories, which can be a percent value or a fixed value. Percentage | Number'
name='bar_gap' type_=reflex.vars.Var[typing.Union[str, int]] description=' The gap between two bars in the same category, which can be a percent value or a fixed value. Percentage | Number'
name='bar_size' type_=reflex.vars.Var[int] description=' The width of all the bars in the chart. Number'
name='max_bar_size' type_=reflex.vars.Var[int] description=' The maximum width of all the bars in a horizontal BarChart, or maximum height in a vertical BarChart.'
name='stack_offset' type_=reflex.vars.Var[typing.Literal['expand', 'none', 'wiggle', 'silhouette']] description=' The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape.'
name='reverse_stack_order' type_=reflex.vars.Var[bool] description=' If false set, stacked items will be rendered left to right. If true set, stacked items will be rendered right to left. (Render direction affects SVG layering, not x position.)'
name='data' type_=reflex.vars.Var[typing.List[typing.Dict[str, typing.Any]]] description=' The source data, in which each element is an object.'
name='sync_id' type_=reflex.vars.Var[str] description=' If any two categorical charts(rx.line_chart, rx.area_chart, rx.bar_chart, rx.composed_chart) have the same sync_id, these two charts can sync the position GraphingTooltip, and the start_index, end_index of Brush.'
name='sync_method' type_=reflex.vars.Var[typing.Literal['index', 'value']] description=" When sync_id is provided, allows customisation of how the charts will synchronize GraphingTooltips and brushes. Using 'index' (default setting), other charts will reuse current datum's index within the data array. In cases where data does not have the same length, this might yield unexpected results. In that case use 'value' which will try to match other charts values, or a fully custom function which will receive tick, data as argument and should return an index. 'index' | 'value' | function"
name='width' type_=reflex.vars.Var[typing.Union[str, int]] description=' The width of chart container. String or Integer'
name='height' type_=reflex.vars.Var[typing.Union[str, int]] description=' The height of chart container.'
name='layout' type_=reflex.vars.Var[typing.Literal['horizontal', 'vertical']] description=" The layout of area in the chart. 'horizontal' | 'vertical'"
name='margin' type_=reflex.vars.Var[typing.Dict[str, typing.Any]] description=' The sizes of whitespace around the chart.'
name='stack_offset' type_=reflex.vars.Var[typing.Literal['expand', 'none', 'wiggle', 'silhouette']] description=" The type of offset function used to generate the lower and upper values in the series array. The four types are built-in offsets in d3-shape. 'expand' | 'none' | 'wiggle' | 'silhouette'"